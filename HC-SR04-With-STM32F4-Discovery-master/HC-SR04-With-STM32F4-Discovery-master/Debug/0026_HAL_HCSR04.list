
0026_HAL_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800106c  0800106c  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001084  08001084  00011084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001088  08001088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800108c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000002c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000038  20000038  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000449c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001170  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00001089  00000000  00000000  00025648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000380  00000000  00000000  000266d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000478  00000000  00000000  00026a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec0f  00000000  00000000  00026ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000055c7  00000000  00000000  00045adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bab22  00000000  00000000  0004b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105bc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000798  00000000  00000000  00105c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001054 	.word	0x08001054

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001054 	.word	0x08001054

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_InitTick+0x3c>)
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_InitTick+0x40>)
{
 80004d2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d4:	7818      	ldrb	r0, [r3, #0]
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	fbb3 f3f0 	udiv	r3, r3, r0
 80004de:	6810      	ldr	r0, [r2, #0]
 80004e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e4:	f000 f886 	bl	80005f4 <HAL_SYSTICK_Config>
 80004e8:	4604      	mov	r4, r0
 80004ea:	b958      	cbnz	r0, 8000504 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ec:	2d0f      	cmp	r5, #15
 80004ee:	d809      	bhi.n	8000504 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f0:	4602      	mov	r2, r0
 80004f2:	4629      	mov	r1, r5
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f84a 	bl	8000590 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <HAL_InitTick+0x44>)
 80004fe:	4620      	mov	r0, r4
 8000500:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000502:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000504:	2001      	movs	r0, #1
 8000506:	e7fc      	b.n	8000502 <HAL_InitTick+0x36>
 8000508:	20000008 	.word	0x20000008
 800050c:	20000000 	.word	0x20000000
 8000510:	20000004 	.word	0x20000004

08000514 <HAL_Init>:
{
 8000514:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x30>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000526:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f81b 	bl	800056c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ffc8 	bl	80004cc <HAL_InitTick>
  HAL_MspInit();
 800053c:	f000 fce8 	bl	8000f10 <HAL_MspInit>
}
 8000540:	2000      	movs	r0, #0
 8000542:	bd08      	pop	{r3, pc}
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000548:	4a03      	ldr	r2, [pc, #12]	; (8000558 <HAL_IncTick+0x10>)
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_IncTick+0x14>)
 800054c:	6811      	ldr	r1, [r2, #0]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	440b      	add	r3, r1
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000028 	.word	0x20000028
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000560:	4b01      	ldr	r3, [pc, #4]	; (8000568 <HAL_GetTick+0x8>)
 8000562:	6818      	ldr	r0, [r3, #0]
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028

0800056c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000588:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	68dc      	ldr	r4, [r3, #12]
 8000596:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a0:	2d04      	cmp	r5, #4
 80005a2:	bf28      	it	cs
 80005a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ac:	bf8c      	ite	hi
 80005ae:	3c03      	subhi	r4, #3
 80005b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b2:	fa03 f505 	lsl.w	r5, r3, r5
 80005b6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ba:	40a3      	lsls	r3, r4
 80005bc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80005c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	bfac      	ite	ge
 80005ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	4a08      	ldrlt	r2, [pc, #32]	; (80005f0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	bfb8      	it	lt
 80005d6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	bfaa      	itet	ge
 80005de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	e000ed14 	.word	0xe000ed14

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20b      	bcs.n	8000614 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	4a05      	ldr	r2, [pc, #20]	; (8000618 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000602:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	21f0      	movs	r1, #240	; 0xf0
 8000606:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000610:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000612:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000614:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000620:	4a6e      	ldr	r2, [pc, #440]	; (80007dc <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80007e4 <HAL_GPIO_Init+0x1c8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000626:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80007e8 <HAL_GPIO_Init+0x1cc>
{
 800062a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800062c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062e:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8000630:	2701      	movs	r7, #1
 8000632:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000634:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000638:	ea37 0404 	bics.w	r4, r7, r4
 800063c:	f040 80b9 	bne.w	80007b2 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000640:	684c      	ldr	r4, [r1, #4]
 8000642:	f024 0a10 	bic.w	sl, r4, #16
 8000646:	f1ba 0f02 	cmp.w	sl, #2
 800064a:	d116      	bne.n	800067a <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800064c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000650:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000654:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000658:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800065c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000660:	f04f 0c0f 	mov.w	ip, #15
 8000664:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000668:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800066c:	690e      	ldr	r6, [r1, #16]
 800066e:	fa06 f60b 	lsl.w	r6, r6, fp
 8000672:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000676:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 800067a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800067e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000682:	f04f 0c03 	mov.w	ip, #3
 8000686:	fa0c fc0e 	lsl.w	ip, ip, lr
 800068a:	ea6f 060c 	mvn.w	r6, ip
 800068e:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000692:	f004 0c03 	and.w	ip, r4, #3
 8000696:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800069a:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800069e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a2:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006a6:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 80006a8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	d815      	bhi.n	80006da <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 80006ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006b2:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006b6:	68ce      	ldr	r6, [r1, #12]
 80006b8:	fa06 fa0e 	lsl.w	sl, r6, lr
 80006bc:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 80006c0:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 80006c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006c8:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006cc:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 80006d0:	fa0c fc03 	lsl.w	ip, ip, r3
 80006d4:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 80006d8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006da:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006dc:	9e01      	ldr	r6, [sp, #4]
 80006de:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006e0:	688e      	ldr	r6, [r1, #8]
 80006e2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e6:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80006e8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ea:	00e6      	lsls	r6, r4, #3
 80006ec:	d561      	bpl.n	80007b2 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	f04f 0b00 	mov.w	fp, #0
 80006f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80006f6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006fa:	4e39      	ldr	r6, [pc, #228]	; (80007e0 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000700:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000704:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000708:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800070c:	9703      	str	r7, [sp, #12]
 800070e:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000710:	f023 0703 	bic.w	r7, r3, #3
 8000714:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000718:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800071c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000720:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000724:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000728:	f04f 0c0f 	mov.w	ip, #15
 800072c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000730:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000732:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000736:	d043      	beq.n	80007c0 <HAL_GPIO_Init+0x1a4>
 8000738:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800073c:	42b0      	cmp	r0, r6
 800073e:	d041      	beq.n	80007c4 <HAL_GPIO_Init+0x1a8>
 8000740:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000744:	42b0      	cmp	r0, r6
 8000746:	d03f      	beq.n	80007c8 <HAL_GPIO_Init+0x1ac>
 8000748:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800074c:	42b0      	cmp	r0, r6
 800074e:	d03d      	beq.n	80007cc <HAL_GPIO_Init+0x1b0>
 8000750:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000754:	42b0      	cmp	r0, r6
 8000756:	d03b      	beq.n	80007d0 <HAL_GPIO_Init+0x1b4>
 8000758:	4548      	cmp	r0, r9
 800075a:	d03b      	beq.n	80007d4 <HAL_GPIO_Init+0x1b8>
 800075c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000760:	42b0      	cmp	r0, r6
 8000762:	d039      	beq.n	80007d8 <HAL_GPIO_Init+0x1bc>
 8000764:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000768:	42b0      	cmp	r0, r6
 800076a:	bf0c      	ite	eq
 800076c:	2607      	moveq	r6, #7
 800076e:	2608      	movne	r6, #8
 8000770:	fa06 f60e 	lsl.w	r6, r6, lr
 8000774:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000778:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800077a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800077c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000782:	bf0c      	ite	eq
 8000784:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000786:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000788:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800078a:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000790:	bf0c      	ite	eq
 8000792:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000794:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000796:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000798:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800079a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800079e:	bf0c      	ite	eq
 80007a0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007a2:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007a4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007a6:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007aa:	bf54      	ite	pl
 80007ac:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007ae:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007b0:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b2:	3301      	adds	r3, #1
 80007b4:	2b10      	cmp	r3, #16
 80007b6:	f47f af3a 	bne.w	800062e <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 80007ba:	b005      	add	sp, #20
 80007bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c0:	465e      	mov	r6, fp
 80007c2:	e7d5      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007c4:	2601      	movs	r6, #1
 80007c6:	e7d3      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007c8:	2602      	movs	r6, #2
 80007ca:	e7d1      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007cc:	2603      	movs	r6, #3
 80007ce:	e7cf      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007d0:	2604      	movs	r6, #4
 80007d2:	e7cd      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007d4:	2605      	movs	r6, #5
 80007d6:	e7cb      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007d8:	2606      	movs	r6, #6
 80007da:	e7c9      	b.n	8000770 <HAL_GPIO_Init+0x154>
 80007dc:	40013c00 	.word	0x40013c00
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021400 	.word	0x40021400

080007ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007ec:	6903      	ldr	r3, [r0, #16]
 80007ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80007f0:	bf14      	ite	ne
 80007f2:	2001      	movne	r0, #1
 80007f4:	2000      	moveq	r0, #0
 80007f6:	4770      	bx	lr

080007f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007f8:	b10a      	cbz	r2, 80007fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007fa:	6181      	str	r1, [r0, #24]
  }
}
 80007fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007fe:	0409      	lsls	r1, r1, #16
 8000800:	e7fb      	b.n	80007fa <HAL_GPIO_WritePin+0x2>
	...

08000804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000804:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000808:	4604      	mov	r4, r0
 800080a:	b918      	cbnz	r0, 8000814 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800080c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800080e:	b002      	add	sp, #8
 8000810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000814:	6803      	ldr	r3, [r0, #0]
 8000816:	07dd      	lsls	r5, r3, #31
 8000818:	d410      	bmi.n	800083c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	0798      	lsls	r0, r3, #30
 800081e:	d45b      	bmi.n	80008d8 <HAL_RCC_OscConfig+0xd4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	071a      	lsls	r2, r3, #28
 8000824:	f100 809d 	bmi.w	8000962 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	075b      	lsls	r3, r3, #29
 800082c:	f100 80bd 	bmi.w	80009aa <HAL_RCC_OscConfig+0x1a6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000830:	69a2      	ldr	r2, [r4, #24]
 8000832:	2a00      	cmp	r2, #0
 8000834:	f040 8124 	bne.w	8000a80 <HAL_RCC_OscConfig+0x27c>
  return HAL_OK;
 8000838:	2000      	movs	r0, #0
 800083a:	e7e8      	b.n	800080e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800083c:	4b8d      	ldr	r3, [pc, #564]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	f002 020c 	and.w	r2, r2, #12
 8000844:	2a04      	cmp	r2, #4
 8000846:	d007      	beq.n	8000858 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800084e:	2a08      	cmp	r2, #8
 8000850:	d10a      	bne.n	8000868 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	0251      	lsls	r1, r2, #9
 8000856:	d507      	bpl.n	8000868 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000858:	4b86      	ldr	r3, [pc, #536]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	039a      	lsls	r2, r3, #14
 800085e:	d5dc      	bpl.n	800081a <HAL_RCC_OscConfig+0x16>
 8000860:	6863      	ldr	r3, [r4, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1d9      	bne.n	800081a <HAL_RCC_OscConfig+0x16>
 8000866:	e7d1      	b.n	800080c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000868:	6862      	ldr	r2, [r4, #4]
 800086a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800086e:	d111      	bne.n	8000894 <HAL_RCC_OscConfig+0x90>
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000876:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000878:	f7ff fe72 	bl	8000560 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087c:	4e7d      	ldr	r6, [pc, #500]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800087e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000880:	6833      	ldr	r3, [r6, #0]
 8000882:	039b      	lsls	r3, r3, #14
 8000884:	d4c9      	bmi.n	800081a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000886:	f7ff fe6b 	bl	8000560 <HAL_GetTick>
 800088a:	1b40      	subs	r0, r0, r5
 800088c:	2864      	cmp	r0, #100	; 0x64
 800088e:	d9f7      	bls.n	8000880 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8000890:	2003      	movs	r0, #3
 8000892:	e7bc      	b.n	800080e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000894:	4d77      	ldr	r5, [pc, #476]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 8000896:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800089a:	682b      	ldr	r3, [r5, #0]
 800089c:	d107      	bne.n	80008ae <HAL_RCC_OscConfig+0xaa>
 800089e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a2:	602b      	str	r3, [r5, #0]
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008aa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008ac:	e7e4      	b.n	8000878 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b2:	602b      	str	r3, [r5, #0]
 80008b4:	682b      	ldr	r3, [r5, #0]
 80008b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ba:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d1db      	bne.n	8000878 <HAL_RCC_OscConfig+0x74>
        tickstart = HAL_GetTick();
 80008c0:	f7ff fe4e 	bl	8000560 <HAL_GetTick>
 80008c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	039f      	lsls	r7, r3, #14
 80008ca:	d5a6      	bpl.n	800081a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008cc:	f7ff fe48 	bl	8000560 <HAL_GetTick>
 80008d0:	1b80      	subs	r0, r0, r6
 80008d2:	2864      	cmp	r0, #100	; 0x64
 80008d4:	d9f7      	bls.n	80008c6 <HAL_RCC_OscConfig+0xc2>
 80008d6:	e7db      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008d8:	4b66      	ldr	r3, [pc, #408]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	f012 0f0c 	tst.w	r2, #12
 80008e0:	d007      	beq.n	80008f2 <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008e8:	2a08      	cmp	r2, #8
 80008ea:	d111      	bne.n	8000910 <HAL_RCC_OscConfig+0x10c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	025e      	lsls	r6, r3, #9
 80008f0:	d40e      	bmi.n	8000910 <HAL_RCC_OscConfig+0x10c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f2:	4a60      	ldr	r2, [pc, #384]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	079d      	lsls	r5, r3, #30
 80008f8:	d502      	bpl.n	8000900 <HAL_RCC_OscConfig+0xfc>
 80008fa:	68e3      	ldr	r3, [r4, #12]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d185      	bne.n	800080c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	6921      	ldr	r1, [r4, #16]
 8000904:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000908:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800090c:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	e787      	b.n	8000820 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000910:	68e2      	ldr	r2, [r4, #12]
 8000912:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <HAL_RCC_OscConfig+0x274>)
 8000914:	b1b2      	cbz	r2, 8000944 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_ENABLE();
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800091a:	f7ff fe21 	bl	8000560 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091e:	4d55      	ldr	r5, [pc, #340]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000920:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000922:	682b      	ldr	r3, [r5, #0]
 8000924:	0798      	lsls	r0, r3, #30
 8000926:	d507      	bpl.n	8000938 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	6922      	ldr	r2, [r4, #16]
 800092c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000930:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000934:	602b      	str	r3, [r5, #0]
 8000936:	e773      	b.n	8000820 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fe12 	bl	8000560 <HAL_GetTick>
 800093c:	1b80      	subs	r0, r0, r6
 800093e:	2802      	cmp	r0, #2
 8000940:	d9ef      	bls.n	8000922 <HAL_RCC_OscConfig+0x11e>
 8000942:	e7a5      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8000944:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000946:	f7ff fe0b 	bl	8000560 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094a:	4e4a      	ldr	r6, [pc, #296]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800094c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094e:	6833      	ldr	r3, [r6, #0]
 8000950:	0799      	lsls	r1, r3, #30
 8000952:	f57f af65 	bpl.w	8000820 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000956:	f7ff fe03 	bl	8000560 <HAL_GetTick>
 800095a:	1b40      	subs	r0, r0, r5
 800095c:	2802      	cmp	r0, #2
 800095e:	d9f6      	bls.n	800094e <HAL_RCC_OscConfig+0x14a>
 8000960:	e796      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000962:	6962      	ldr	r2, [r4, #20]
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <HAL_RCC_OscConfig+0x274>)
 8000966:	b182      	cbz	r2, 800098a <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8000968:	2201      	movs	r2, #1
 800096a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800096e:	f7ff fdf7 	bl	8000560 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000972:	4e40      	ldr	r6, [pc, #256]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000974:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000976:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000978:	079f      	lsls	r7, r3, #30
 800097a:	f53f af55 	bmi.w	8000828 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097e:	f7ff fdef 	bl	8000560 <HAL_GetTick>
 8000982:	1b40      	subs	r0, r0, r5
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x172>
 8000988:	e782      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 800098a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800098e:	f7ff fde7 	bl	8000560 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000992:	4e38      	ldr	r6, [pc, #224]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000994:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000996:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000998:	0798      	lsls	r0, r3, #30
 800099a:	f57f af45 	bpl.w	8000828 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800099e:	f7ff fddf 	bl	8000560 <HAL_GetTick>
 80009a2:	1b40      	subs	r0, r0, r5
 80009a4:	2802      	cmp	r0, #2
 80009a6:	d9f6      	bls.n	8000996 <HAL_RCC_OscConfig+0x192>
 80009a8:	e772      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80009ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ae:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009b2:	d128      	bne.n	8000a06 <HAL_RCC_OscConfig+0x202>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009c8:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ca:	4d2c      	ldr	r5, [pc, #176]	; (8000a7c <HAL_RCC_OscConfig+0x278>)
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	05d9      	lsls	r1, r3, #23
 80009d0:	d51b      	bpl.n	8000a0a <HAL_RCC_OscConfig+0x206>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d2:	68a3      	ldr	r3, [r4, #8]
 80009d4:	4d27      	ldr	r5, [pc, #156]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d127      	bne.n	8000a2a <HAL_RCC_OscConfig+0x226>
 80009da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009e2:	f7ff fdbd 	bl	8000560 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e6:	4e23      	ldr	r6, [pc, #140]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80009e8:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ea:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80009f0:	079b      	lsls	r3, r3, #30
 80009f2:	d539      	bpl.n	8000a68 <HAL_RCC_OscConfig+0x264>
    if(pwrclkchanged == SET)
 80009f4:	2f00      	cmp	r7, #0
 80009f6:	f43f af1b 	beq.w	8000830 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80009fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	e714      	b.n	8000830 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a06:	2700      	movs	r7, #0
 8000a08:	e7df      	b.n	80009ca <HAL_RCC_OscConfig+0x1c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a10:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a12:	f7ff fda5 	bl	8000560 <HAL_GetTick>
 8000a16:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	05da      	lsls	r2, r3, #23
 8000a1c:	d4d9      	bmi.n	80009d2 <HAL_RCC_OscConfig+0x1ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a1e:	f7ff fd9f 	bl	8000560 <HAL_GetTick>
 8000a22:	1b80      	subs	r0, r0, r6
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d9f7      	bls.n	8000a18 <HAL_RCC_OscConfig+0x214>
 8000a28:	e732      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d104      	bne.n	8000a38 <HAL_RCC_OscConfig+0x234>
 8000a2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	672b      	str	r3, [r5, #112]	; 0x70
 8000a36:	e7d0      	b.n	80009da <HAL_RCC_OscConfig+0x1d6>
 8000a38:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a3a:	f022 0201 	bic.w	r2, r2, #1
 8000a3e:	672a      	str	r2, [r5, #112]	; 0x70
 8000a40:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1ca      	bne.n	80009e2 <HAL_RCC_OscConfig+0x1de>
      tickstart = HAL_GetTick();
 8000a4c:	f7ff fd88 	bl	8000560 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a50:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a58:	0798      	lsls	r0, r3, #30
 8000a5a:	d5cb      	bpl.n	80009f4 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5c:	f7ff fd80 	bl	8000560 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	4540      	cmp	r0, r8
 8000a64:	d9f7      	bls.n	8000a56 <HAL_RCC_OscConfig+0x252>
 8000a66:	e713      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a68:	f7ff fd7a 	bl	8000560 <HAL_GetTick>
 8000a6c:	1b40      	subs	r0, r0, r5
 8000a6e:	4540      	cmp	r0, r8
 8000a70:	d9bd      	bls.n	80009ee <HAL_RCC_OscConfig+0x1ea>
 8000a72:	e70d      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
 8000a74:	40023800 	.word	0x40023800
 8000a78:	42470000 	.word	0x42470000
 8000a7c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a80:	4d22      	ldr	r5, [pc, #136]	; (8000b0c <HAL_RCC_OscConfig+0x308>)
 8000a82:	68ab      	ldr	r3, [r5, #8]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	f43f aebf 	beq.w	800080c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <HAL_RCC_OscConfig+0x30c>)
 8000a90:	2a02      	cmp	r2, #2
 8000a92:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8000a96:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a98:	d12b      	bne.n	8000af2 <HAL_RCC_OscConfig+0x2ee>
        tickstart = HAL_GetTick();
 8000a9a:	f7ff fd61 	bl	8000560 <HAL_GetTick>
 8000a9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	0199      	lsls	r1, r3, #6
 8000aa4:	d41f      	bmi.n	8000ae6 <HAL_RCC_OscConfig+0x2e2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aa6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ab4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ab8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000aba:	0852      	lsrs	r2, r2, #1
 8000abc:	3a01      	subs	r2, #1
 8000abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ac2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac6:	4d11      	ldr	r5, [pc, #68]	; (8000b0c <HAL_RCC_OscConfig+0x308>)
        __HAL_RCC_PLL_ENABLE();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000acc:	f7ff fd48 	bl	8000560 <HAL_GetTick>
 8000ad0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	019a      	lsls	r2, r3, #6
 8000ad6:	f53f aeaf 	bmi.w	8000838 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ada:	f7ff fd41 	bl	8000560 <HAL_GetTick>
 8000ade:	1b00      	subs	r0, r0, r4
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9f6      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x2ce>
 8000ae4:	e6d4      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae6:	f7ff fd3b 	bl	8000560 <HAL_GetTick>
 8000aea:	1b80      	subs	r0, r0, r6
 8000aec:	2802      	cmp	r0, #2
 8000aee:	d9d7      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x29c>
 8000af0:	e6ce      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8000af2:	f7ff fd35 	bl	8000560 <HAL_GetTick>
 8000af6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	019b      	lsls	r3, r3, #6
 8000afc:	f57f ae9c 	bpl.w	8000838 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b00:	f7ff fd2e 	bl	8000560 <HAL_GetTick>
 8000b04:	1b00      	subs	r0, r0, r4
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f6      	bls.n	8000af8 <HAL_RCC_OscConfig+0x2f4>
 8000b0a:	e6c1      	b.n	8000890 <HAL_RCC_OscConfig+0x8c>
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	42470000 	.word	0x42470000

08000b14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b14:	4913      	ldr	r1, [pc, #76]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b18:	688b      	ldr	r3, [r1, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d01c      	beq.n	8000b5c <HAL_RCC_GetSysClockFreq+0x48>
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d11c      	bne.n	8000b60 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b26:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b28:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b30:	bf14      	ite	ne
 8000b32:	480d      	ldrne	r0, [pc, #52]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b34:	480d      	ldreq	r0, [pc, #52]	; (8000b6c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b36:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b3a:	bf18      	it	ne
 8000b3c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b42:	fba1 0100 	umull	r0, r1, r1, r0
 8000b46:	f7ff fb3f 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b52:	3301      	adds	r3, #1
 8000b54:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000b56:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b5a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b5e:	e7fc      	b.n	8000b5a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000b62:	e7fa      	b.n	8000b5a <HAL_RCC_GetSysClockFreq+0x46>
 8000b64:	40023800 	.word	0x40023800
 8000b68:	007a1200 	.word	0x007a1200
 8000b6c:	00f42400 	.word	0x00f42400

08000b70 <HAL_RCC_ClockConfig>:
{
 8000b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b76:	4604      	mov	r4, r0
 8000b78:	b910      	cbnz	r0, 8000b80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b7a:	2001      	movs	r0, #1
}
 8000b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b80:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <HAL_RCC_ClockConfig+0x120>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	f002 020f 	and.w	r2, r2, #15
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	d327      	bcc.n	8000bdc <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b8c:	6822      	ldr	r2, [r4, #0]
 8000b8e:	0797      	lsls	r7, r2, #30
 8000b90:	d42c      	bmi.n	8000bec <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b92:	07d0      	lsls	r0, r2, #31
 8000b94:	d440      	bmi.n	8000c18 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <HAL_RCC_ClockConfig+0x120>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	f002 020f 	and.w	r2, r2, #15
 8000b9e:	42aa      	cmp	r2, r5
 8000ba0:	d865      	bhi.n	8000c6e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ba2:	6822      	ldr	r2, [r4, #0]
 8000ba4:	0751      	lsls	r1, r2, #29
 8000ba6:	d46b      	bmi.n	8000c80 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba8:	0713      	lsls	r3, r2, #28
 8000baa:	d507      	bpl.n	8000bbc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bac:	4a39      	ldr	r2, [pc, #228]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000bae:	6921      	ldr	r1, [r4, #16]
 8000bb0:	6893      	ldr	r3, [r2, #8]
 8000bb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bbc:	f7ff ffaa 	bl	8000b14 <HAL_RCC_GetSysClockFreq>
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000bc2:	4a35      	ldr	r2, [pc, #212]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	40d8      	lsrs	r0, r3
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <HAL_RCC_ClockConfig+0x12c>)
 8000bd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fc7a 	bl	80004cc <HAL_InitTick>
  return HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7cf      	b.n	8000b7c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bdc:	b2ca      	uxtb	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d1c7      	bne.n	8000b7a <HAL_RCC_ClockConfig+0xa>
 8000bea:	e7cf      	b.n	8000b8c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000bee:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf2:	bf1e      	ittt	ne
 8000bf4:	6899      	ldrne	r1, [r3, #8]
 8000bf6:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000bfa:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bfc:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bfe:	bf42      	ittt	mi
 8000c00:	6899      	ldrmi	r1, [r3, #8]
 8000c02:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000c06:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c08:	4922      	ldr	r1, [pc, #136]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000c0a:	68a0      	ldr	r0, [r4, #8]
 8000c0c:	688b      	ldr	r3, [r1, #8]
 8000c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c12:	4303      	orrs	r3, r0
 8000c14:	608b      	str	r3, [r1, #8]
 8000c16:	e7bc      	b.n	8000b92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c18:	6862      	ldr	r2, [r4, #4]
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000c1c:	2a01      	cmp	r2, #1
 8000c1e:	d11c      	bne.n	8000c5a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c26:	d0a8      	beq.n	8000b7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c28:	4e1a      	ldr	r6, [pc, #104]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000c2a:	68b3      	ldr	r3, [r6, #8]
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c34:	f7ff fc94 	bl	8000560 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c38:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c3e:	68b3      	ldr	r3, [r6, #8]
 8000c40:	6862      	ldr	r2, [r4, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c4a:	d0a4      	beq.n	8000b96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c4c:	f7ff fc88 	bl	8000560 <HAL_GetTick>
 8000c50:	1bc0      	subs	r0, r0, r7
 8000c52:	4540      	cmp	r0, r8
 8000c54:	d9f3      	bls.n	8000c3e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c56:	2003      	movs	r0, #3
 8000c58:	e790      	b.n	8000b7c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c5a:	1e91      	subs	r1, r2, #2
 8000c5c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c60:	d802      	bhi.n	8000c68 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c66:	e7de      	b.n	8000c26 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	f013 0f02 	tst.w	r3, #2
 8000c6c:	e7db      	b.n	8000c26 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6e:	b2ea      	uxtb	r2, r5
 8000c70:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	42ab      	cmp	r3, r5
 8000c7a:	f47f af7e 	bne.w	8000b7a <HAL_RCC_ClockConfig+0xa>
 8000c7e:	e790      	b.n	8000ba2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000c82:	68e0      	ldr	r0, [r4, #12]
 8000c84:	688b      	ldr	r3, [r1, #8]
 8000c86:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	608b      	str	r3, [r1, #8]
 8000c8e:	e78b      	b.n	8000ba8 <HAL_RCC_ClockConfig+0x38>
 8000c90:	40023c00 	.word	0x40023c00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	0800106c 	.word	0x0800106c
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ca0:	4b01      	ldr	r3, [pc, #4]	; (8000ca8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <DWT_Delay_Init+0x44>)
 8000cae:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000cb2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000cb6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000cba:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000cbe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cc2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000cc6:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f022 0201 	bic.w	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f042 0201 	orr.w	r2, r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000cde:	bf00      	nop
     __ASM volatile ("NOP");
 8000ce0:	bf00      	nop
  __ASM volatile ("NOP");
 8000ce2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ce4:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 8000ce6:	fab0 f080 	clz	r0, r0
 8000cea:	0940      	lsrs	r0, r0, #5
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Read_TCRT5000>:
uint32_t sensor_time;
uint16_t distance;
uint32_t local_time;

uint32_t Read_TCRT5000()
{
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 local_time = 0;
 8000cf6:	4c0d      	ldr	r4, [pc, #52]	; (8000d2c <Read_TCRT5000+0x38>)



	// wait for the echo pin to go high

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))				// while the pin is high
 8000cf8:	4e0d      	ldr	r6, [pc, #52]	; (8000d30 <Read_TCRT5000+0x3c>)
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cfa:	4d0e      	ldr	r5, [pc, #56]	; (8000d34 <Read_TCRT5000+0x40>)
	 local_time = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6023      	str	r3, [r4, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))				// while the pin is high
 8000d00:	2104      	movs	r1, #4
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff fd72 	bl	80007ec <HAL_GPIO_ReadPin>
 8000d08:	b910      	cbnz	r0, 8000d10 <Read_TCRT5000+0x1c>
	{
		local_time++;										// increment local time
		DWT_Delay_us(1);									// every 1 us
	}

	return local_time * 2;
 8000d0a:	6820      	ldr	r0, [r4, #0]

}
 8000d0c:	0040      	lsls	r0, r0, #1
 8000d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		local_time++;										// increment local time
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	6023      	str	r3, [r4, #0]
 8000d16:	686f      	ldr	r7, [r5, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000d18:	f7ff ffc2 	bl	8000ca0 <HAL_RCC_GetHCLKFreq>
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <Read_TCRT5000+0x44>)
 8000d1e:	fbb0 f0f3 	udiv	r0, r0, r3

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000d22:	686b      	ldr	r3, [r5, #4]
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	4283      	cmp	r3, r0
 8000d28:	d3fb      	bcc.n	8000d22 <Read_TCRT5000+0x2e>
 8000d2a:	e7e9      	b.n	8000d00 <Read_TCRT5000+0xc>
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	40020000 	.word	0x40020000
 8000d34:	e0001000 	.word	0xe0001000
 8000d38:	000f4240 	.word	0x000f4240

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b530      	push	{r4, r5, lr}
 8000d3e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d40:	2210      	movs	r2, #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	a80a      	add	r0, sp, #40	; 0x28
 8000d46:	f000 f97d 	bl	8001044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2214      	movs	r2, #20
 8000d4e:	a803      	add	r0, sp, #12
 8000d50:	f000 f978 	bl	8001044 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2400      	movs	r4, #0
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <SystemClock_Config+0x8c>)
 8000d58:	9401      	str	r4, [sp, #4]
 8000d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <SystemClock_Config+0x90>)
 8000d6e:	9402      	str	r4, [sp, #8]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8c:	2502      	movs	r5, #2
 8000d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d92:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d94:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da0:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f7ff fd2e 	bl	8000804 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000daa:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	e9cd 1306 	strd	r1, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dba:	a803      	add	r0, sp, #12
 8000dbc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dc0:	f7ff fed6 	bl	8000b70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000dc4:	b015      	add	sp, #84	; 0x54
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <main>:
{
 8000dd0:	b500      	push	{lr}
 8000dd2:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000dd4:	f7ff fb9e 	bl	8000514 <HAL_Init>
  SystemClock_Config();
 8000dd8:	f7ff ffb0 	bl	8000d3c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2214      	movs	r2, #20
 8000dde:	2100      	movs	r1, #0
 8000de0:	a803      	add	r0, sp, #12
 8000de2:	f000 f92f 	bl	8001044 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	2400      	movs	r4, #0
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <main+0x12c>)
 8000dea:	9400      	str	r4, [sp, #0]
 8000dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dee:	4844      	ldr	r0, [pc, #272]	; (8000f00 <main+0x130>)
	  distance = (sensor_time * 3000) / 20 ;	// user the formula to get the distance
 8000df0:	4e44      	ldr	r6, [pc, #272]	; (8000f04 <main+0x134>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
 8000df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	9401      	str	r4, [sp, #4]
 8000e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0e:	f002 0201 	and.w	r2, r2, #1
 8000e12:	9201      	str	r2, [sp, #4]
 8000e14:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	9402      	str	r4, [sp, #8]
 8000e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1a:	f042 0208 	orr.w	r2, r2, #8
 8000e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e26:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e2a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e2e:	f7ff fce3 	bl	80007f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e32:	4622      	mov	r2, r4
 8000e34:	4834      	ldr	r0, [pc, #208]	; (8000f08 <main+0x138>)
 8000e36:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e3a:	f7ff fcdd 	bl	80007f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2501      	movs	r5, #1
 8000e40:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	482f      	ldr	r0, [pc, #188]	; (8000f00 <main+0x130>)
 8000e44:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f7ff fbe5 	bl	800061c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e52:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <main+0x130>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f7ff fbdd 	bl	800061c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	4828      	ldr	r0, [pc, #160]	; (8000f08 <main+0x138>)
 8000e68:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f7ff fbd3 	bl	800061c <HAL_GPIO_Init>
  DWT_Delay_Init();
 8000e76:	f7ff ff19 	bl	8000cac <DWT_Delay_Init>
	  sensor_time = Read_TCRT5000();			// get the high time
 8000e7a:	4d24      	ldr	r5, [pc, #144]	; (8000f0c <main+0x13c>)
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 8000e7c:	4c22      	ldr	r4, [pc, #136]	; (8000f08 <main+0x138>)
	  sensor_time = Read_TCRT5000();			// get the high time
 8000e7e:	f7ff ff39 	bl	8000cf4 <Read_TCRT5000>
	  distance = (sensor_time * 3000) / 20 ;	// user the formula to get the distance
 8000e82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e86:	4343      	muls	r3, r0
	  sensor_time = Read_TCRT5000();			// get the high time
 8000e88:	6028      	str	r0, [r5, #0]
	  distance = (sensor_time * 3000) / 20 ;	// user the formula to get the distance
 8000e8a:	2014      	movs	r0, #20
 8000e8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e90:	b29b      	uxth	r3, r3
	  if(distance <= 40)
 8000e92:	2b28      	cmp	r3, #40	; 0x28
	  distance = (sensor_time * 3000) / 20 ;	// user the formula to get the distance
 8000e94:	8033      	strh	r3, [r6, #0]
	  if(distance <= 40)
 8000e96:	d803      	bhi.n	8000ea0 <main+0xd0>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 8000e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e9e:	e00c      	b.n	8000eba <main+0xea>
	  else if(distance > 40 && distance <=60)
 8000ea0:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 8000ea4:	2a13      	cmp	r2, #19
 8000ea6:	d80c      	bhi.n	8000ec2 <main+0xf2>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f7ff fca2 	bl	80007f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f7ff fc9c 	bl	80007f8 <HAL_GPIO_WritePin>
 8000ec0:	e7dd      	b.n	8000e7e <main+0xae>
	  else if(distance > 60 && distance <= 80)
 8000ec2:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 8000ec6:	2a13      	cmp	r2, #19
 8000ec8:	d809      	bhi.n	8000ede <main+0x10e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f7ff fc91 	bl	80007f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000edc:	e7ed      	b.n	8000eba <main+0xea>
	  else if(distance > 80 && distance <= 100)
 8000ede:	3b51      	subs	r3, #81	; 0x51
 8000ee0:	2b13      	cmp	r3, #19
 8000ee2:	d809      	bhi.n	8000ef8 <main+0x128>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fc84 	bl	80007f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000ef6:	e7e0      	b.n	8000eba <main+0xea>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	e7ce      	b.n	8000e9a <main+0xca>
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	2000002c 	.word	0x2000002c
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	20000034 	.word	0x20000034

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_MspInit+0x34>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	9100      	str	r1, [sp, #0]
 8000f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f26:	9200      	str	r2, [sp, #0]
 8000f28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	9101      	str	r1, [sp, #4]
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	b002      	add	sp, #8
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f48:	4770      	bx	lr

08000f4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler>

08000f4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler>

08000f4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler>

08000f50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler>

08000f52 <SVC_Handler>:
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f7ff baf6 	b.w	8000548 <HAL_IncTick>

08000f5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	490f      	ldr	r1, [pc, #60]	; (8000f9c <SystemInit+0x40>)
 8000f5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <SystemInit+0x44>)
 8000f6c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f6e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000f76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <SystemInit+0x48>)
 8000f86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f90:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f96:	608b      	str	r3, [r1, #8]
#endif
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	24003010 	.word	0x24003010

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fae:	e003      	b.n	8000fb8 <LoopCopyDataInit>

08000fb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fb6:	3104      	adds	r1, #4

08000fb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc0:	d3f6      	bcc.n	8000fb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fc4:	e002      	b.n	8000fcc <LoopFillZerobss>

08000fc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc8:	f842 3b04 	str.w	r3, [r2], #4

08000fcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd0:	d3f9      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ffc3 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f000 f811 	bl	8000ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fef9 	bl	8000dd0 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fe4:	0800108c 	.word	0x0800108c
  ldr  r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fec:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ff0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ff4:	20000038 	.word	0x20000038

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <__libc_init_array>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	4d0d      	ldr	r5, [pc, #52]	; (8001034 <__libc_init_array+0x38>)
 8001000:	4c0d      	ldr	r4, [pc, #52]	; (8001038 <__libc_init_array+0x3c>)
 8001002:	1b64      	subs	r4, r4, r5
 8001004:	10a4      	asrs	r4, r4, #2
 8001006:	2600      	movs	r6, #0
 8001008:	42a6      	cmp	r6, r4
 800100a:	d109      	bne.n	8001020 <__libc_init_array+0x24>
 800100c:	4d0b      	ldr	r5, [pc, #44]	; (800103c <__libc_init_array+0x40>)
 800100e:	4c0c      	ldr	r4, [pc, #48]	; (8001040 <__libc_init_array+0x44>)
 8001010:	f000 f820 	bl	8001054 <_init>
 8001014:	1b64      	subs	r4, r4, r5
 8001016:	10a4      	asrs	r4, r4, #2
 8001018:	2600      	movs	r6, #0
 800101a:	42a6      	cmp	r6, r4
 800101c:	d105      	bne.n	800102a <__libc_init_array+0x2e>
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	f855 3b04 	ldr.w	r3, [r5], #4
 8001024:	4798      	blx	r3
 8001026:	3601      	adds	r6, #1
 8001028:	e7ee      	b.n	8001008 <__libc_init_array+0xc>
 800102a:	f855 3b04 	ldr.w	r3, [r5], #4
 800102e:	4798      	blx	r3
 8001030:	3601      	adds	r6, #1
 8001032:	e7f2      	b.n	800101a <__libc_init_array+0x1e>
 8001034:	08001084 	.word	0x08001084
 8001038:	08001084 	.word	0x08001084
 800103c:	08001084 	.word	0x08001084
 8001040:	08001088 	.word	0x08001088

08001044 <memset>:
 8001044:	4402      	add	r2, r0
 8001046:	4603      	mov	r3, r0
 8001048:	4293      	cmp	r3, r2
 800104a:	d100      	bne.n	800104e <memset+0xa>
 800104c:	4770      	bx	lr
 800104e:	f803 1b01 	strb.w	r1, [r3], #1
 8001052:	e7f9      	b.n	8001048 <memset+0x4>

08001054 <_init>:
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	bf00      	nop
 8001058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105a:	bc08      	pop	{r3}
 800105c:	469e      	mov	lr, r3
 800105e:	4770      	bx	lr

08001060 <_fini>:
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001062:	bf00      	nop
 8001064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001066:	bc08      	pop	{r3}
 8001068:	469e      	mov	lr, r3
 800106a:	4770      	bx	lr
